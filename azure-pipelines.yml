#
# Azure Pipelines
# - Build both Smilr Node.js images and push to Azure Container Registry
# Ben C, 2019
#
name: $(Date:yyyy-MM-dd)$(Rev:.rr)

trigger:
  branches:
    include: 
    - master
  paths:
    include:
    - node/*
    - vue/*
    - azure/pipelines/build.yaml
pr: ['master']

# NOTE! This variable group must be pre-created and populated
# - Expected variables: acr-connection
variables:
  - group: shared-variables

stages:
# *************************************************************************************
# Single stage: test, build and push
# *************************************************************************************
- stage: build
  displayName: 'Test & build containers'

  jobs:
    # =====================================================================================
    # Run unit tests for Data API and Vue.js SPA/client, and lint checks
    # =====================================================================================  
  - job: testsJob
    displayName: 'Run linting & tests'
    
    pool:
      vmImage: ubuntu-latest
        
    steps:
    - bash: |
        npm install --silent
        npm run lint
      displayName: 'Run lint for frontend'
      workingDirectory: node/frontend

    - bash: |
        npm install --silent
        npm run lint
      displayName: 'Run lint for data-api'
      workingDirectory: node/data-api

    - bash: |
        npm run test-junit
        npm run coverage
      displayName: 'Run tests for data-api'
      workingDirectory: node/data-api
      continueOnError: true

    - task: PublishTestResults@2
      displayName: 'Publish tests for data-api'
      inputs:
        testResultsFiles: node/data-api/test-results.xml
        testResultsFormat: JUnit
        testRunTitle: 'Data API Tests'
        failTaskOnFailedTests: true

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage for data-api'
      inputs:
        codeCoverageTool: cobertura
        summaryFileLocation: node/data-api/coverage/cobertura-coverage.xml

    - bash: |
        npm install --silent
        npm run test:unit-report
      displayName: 'Run tests for Vue SPA client'
      workingDirectory: vue
      continueOnError: true

    - task: PublishTestResults@2
      displayName: 'Publish tests for Vue SPA client'
      inputs:
        testResultsFiles: 'vue/*.xml'
        testResultsFormat: JUnit
        testRunTitle: 'Vue SPA Tests'
        failTaskOnFailedTests: true

    # =====================================================================================
    # Build container image and push to ACR 
    # =====================================================================================
  - job: buildPushJob
    # NOTE! Only run in master branch (i.e. merged PRs) 
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    dependsOn: testsJob
    displayName: 'Build & push to ACR'
    
    pool:
      vmImage: ubuntu-latest

    steps:
    - task: Docker@2
      displayName: 'Build data API'
      inputs:
        command: build
        containerRegistry: $(acr-connection)
        Dockerfile: node/data-api/Dockerfile
        buildContext: .
        repository: smilr/data-api
        arguments: --build-arg build_info="Pipeline CI build $(Build.BuildNumber) [Linux container]"
        tags: |
          latest
          $(Build.BuildNumber)

    - task: Docker@2
      displayName: 'Build frontend'
      inputs:
        command: build
        containerRegistry: $(acr-connection)
        Dockerfile: node/frontend/Dockerfile
        buildContext: .
        repository: smilr/frontend
        arguments: --build-arg build_info="Pipeline CI build $(Build.BuildNumber) $(Build.Reason) [Linux container]"
        tags: |
          latest
          $(Build.BuildNumber)  

    - task: Docker@2
      displayName: 'Push data API'
      inputs:
        command: push
        containerRegistry: $(acr-connection)
        repository: smilr/data-api
        tags: |
          latest
          $(Build.BuildNumber) 

    - task: Docker@2
      displayName: 'Push frontend'
      inputs:
        command: push
        containerRegistry: $(acr-connection)
        repository: smilr/frontend
        tags: |
          latest
          $(Build.BuildNumber)
      
    - publish: kubernetes/helm
      artifact: helm-charts
      displayName: 'Publish helm-charts artifact'